class Schema {
    // properties (of primitive values)
    Namespace: string;
    Alias: string;

    // child (contained) nodes
    Elements: Collection<EnumType|EntityType|ComplexType|PrimitiveType>;
}

class EnumType {
    // properties (of primitive values)
    Name: string;

    // child (contained) nodes
    Members: Collection<Member>;
}

class Member {
    // properties (of primitive values)
    Name: string;
    Value: number;
}

class EntityType {
    // properties (of primitive values)
    Name: string;

    // references (associations) to other nodes
    BaseType: Box<EntityType>;

    // child (contained) nodes
    Properties: Collection<Property|NavigationProperty>;
    Key: Collection<PropertyRef>;
}

class ComplexType {
    // properties (of primitive values)
    Name: string;

    // references (associations) to other nodes
    BaseType: Box<ComplexType>;

    // child (contained) nodes
    Properties: Collection<Property|NavigationProperty>;
}

class Property {
    // properties (of primitive values)
    Name: string;
    Nullable: boolean;

    // references (associations) to other nodes
    Type: Box<ComplexType|EnumType|PrimitiveType>;
}

class NavigationProperty {
    // properties (of primitive values)
    Name: string;
    ContainsTarget: string;

    // references (associations) to other nodes
    Type: Box<EntityType>;
}

class PropertyRef {
    // properties (of primitive values)
    Alias: string;

    // references (associations) to other nodes
    Name: Box<Property>;
}

class PrimitiveType {
    // properties (of primitive values)
    Name: string;
}












type Box<T> = any
type Collection<T> = any
