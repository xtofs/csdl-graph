model element Schema {
    // properties (of primitive values)
    Namespace: string;
    Alias: string;

    // child (contained) nodes
    Elements: Collection<EnumType|EntityType|ComplexType|PrimitiveType|TypeDefinition|Term>;
}

model element TypeDefinition {
    // properties (of primitive values)
    Name: string;

    // references (associations) to other nodes
    UnderlyingType: Reference<PrimitiveType>;

    // child (contained) nodes
    Elements: Collection<Annotation>;
}

model element EnumType {
    // properties (of primitive values)
    Name: string;

    // child (contained) nodes
    Members: Collection<Member>;
}

model element Member {
    // properties (of primitive values)
    Name: string;
    Value: number;
}

model element EntityType {
    // properties (of primitive values)
    Name: string;

    // references (associations) to other nodes
    BaseType: Reference<EntityType>;

    // child (contained) nodes
    Properties: Collection<Property|NavigationProperty|Annotation>;
    Key: Collection<PropertyRef>;
}

model element ComplexType {
    // properties (of primitive values)
    Name: string;

    // references (associations) to other nodes
    BaseType: Reference<ComplexType>;

    // child (contained) nodes
    Properties: Collection<Property|NavigationProperty|Annotation>;
}

model element Property {
    // properties (of primitive values)
    Name: string;
    Nullable: boolean;

    // references (associations) to other nodes
    Type: Reference<ComplexType|EnumType|PrimitiveType>;

    // child (contained) nodes
    Annotations: Collection<Annotation>;
}

model element NavigationProperty {
    // properties (of primitive values)
    Name: string;
    ContainsTarget: boolean;

    // references (associations) to other nodes
    Type: Reference<EntityType>;

    // child (contained) nodes
    Annotations: Collection<Annotation>;
}

model element PropertyRef {
    // properties (of primitive values)
    Alias: string;

    // references (associations) to other nodes
    Name: PathReference<NavigationProperty,Property>;
}

model element NavigationPropertyBinding {
}

model element PrimitiveType {
    // properties (of primitive values)
    Name: string;

    // child (contained) nodes
    Annotations: Collection<Annotation>;
}

model element Term {
    // properties (of primitive values)
    Name: string;
    Nullable: boolean;
    DefaultValue: string;
    AppliesTo: string;

    // references (associations) to other nodes
    Type: Reference<ComplexType|EnumType|PrimitiveType>;
    BaseTerm: Reference<Term>;

    // child (contained) nodes
    Annotations: Collection<Annotation>;
}

model element Annotation {
    // properties (of primitive values)
    Qualifier: string;

    // references (associations) to other nodes
    Term: Reference<Term>;
}

